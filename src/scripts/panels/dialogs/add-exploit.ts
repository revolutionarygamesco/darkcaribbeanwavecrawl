import { MODULE_ID } from '../../settings.ts'
import { Exploit } from '../../state/state.ts'
import localize from '../../utilities/localize.ts'
import getExploits from '../../state/exploits/get.ts'
import addExploit from '../../state/exploits/add.ts'

const openAddExploitDialog = async (
  captain: Actor | null | undefined,
  onComplete?: () => Promise<void>
): Promise<void> => {
  const path = [MODULE_ID, 'exploits-panel', 'dialogs', 'add-exploit']
  const title = localize([...path, 'title'].join('.'))
  const exploits = await getExploits(captain?.id)
  const latest = exploits.length > 0
    ? exploits[exploits.length - 1].history
    : undefined
  const note = latest
    ? `<p class="hint">${localize([...path, 'note'].join('.'), { latest })}</p>`
    : ''
  const placeholder = localize([...path, 'placeholder'].join('.'))

  const dialog = new foundry.applications.api.DialogV2({
    id: `${MODULE_ID}-add-exploit`,
    window: { title },
    position: { width: 500 },
    content: `
        <textarea id="exploit" name="exploit" placeholder="${placeholder}" rows="5"></textarea>
        ${note}
      `,
    buttons: [
      {
        action: 'add',
        label: localize([...path, 'buttons', 'add'].join('.')),
        callback: async (_event: Event, button: HTMLButtonElement) => {
          const coll = button.form?.elements
          if (!coll) return

          const textarea = (coll as any).exploit as HTMLTextAreaElement
          const history = textarea.value
          const exploit: Exploit = { history, legend: [history] }
          if (captain) await addExploit(captain.id, exploit)
          if (onComplete) await onComplete()
        }
      },
      {
        action: 'cancel',
        label: localize([...path, 'buttons', 'cancel'].join('.')),
        callback: async () => {
          await dialog.close()
        }
      }
    ]
  })

  await dialog.render(true)
}

export default openAddExploitDialog
