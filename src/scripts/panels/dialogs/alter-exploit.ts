import localize from '../../utilities/localize.ts'
import getExploits from '../../state/exploits/get.ts'
import rollTable from '../../utilities/roll-table.ts'
import {MODULE_ID} from '../../settings.ts'
import twistExploit from '../../state/exploits/twist.ts'

const openAlterExploitDialog = async (
  captain: Actor | null | undefined,
  index: number = 0,
  onComplete?: () => Promise<void>
): Promise<void> => {
  const path = [MODULE_ID, 'exploits-panel', 'dialogs', 'alter-exploit']
  const title = localize([...path, 'title'].join('.'))
  const exploits = await getExploits(captain?.id)
  const exploit = exploits[index]
  if (!exploit) return

  const current = exploit.legend[exploit.legend.length - 1]
  await rollTable('legend', { rollMode: 'whisper '})

  const dialog = new foundry.applications.api.DialogV2({
    id: `${MODULE_ID}-alter-exploit`,
    window: { title },
    position: { width: 500 },
    content: `
        <textarea id="exploit" name="exploit" rows="5">${current}</textarea>
      `,
    buttons: [
      {
        action: 'change',
        label: localize([...path, 'buttons', 'change'].join('.')),
        callback: async (_event: Event, button: HTMLButtonElement) => {
          const coll = button.form?.elements
          if (!coll) return

          const textarea = (coll as any).exploit as HTMLTextAreaElement
          const twist = textarea.value
          if (captain) await twistExploit(captain.id, index, twist)
          if (onComplete) await onComplete()
        }
      },
      {
        action: 'cancel',
        label: localize([...path, 'buttons', 'cancel'].join('.')),
        callback: async () => {
          await dialog.close()
        }
      }
    ]
  })

  await dialog.render(true)
}

export default openAlterExploitDialog
