import { MODULE_ID } from '../settings.ts'

import getPanelDimensions from '../utilities/get-dimensions.ts'
import getExploits from '../state/exploits/get.ts'
import registerPartials from './register-partials.ts'
import getAssigned from '../state/crew/positions/get.ts'
import localize from '../utilities/localize.ts'

const { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api

export class ExploitsPanel extends HandlebarsApplicationMixin(ApplicationV2) {
  private _currentTab: string = 'legend'
  private _subject: Actor | null | undefined = undefined

  static _path = [MODULE_ID, 'exploits-panel']

  static DEFAULT_OPTIONS = {
    id: `${MODULE_ID}-exploits`,
    tag: 'section',
    classes: ['exploits-panel'],
    window: {
      resizable: true,
      title: localize([...ExploitsPanel._path, 'window', 'title', 'anon'].join('.'))
    },
    position: getPanelDimensions(500, 2/3)
  }

  static PARTS = {
    tabs: {
      template: `./modules/${MODULE_ID}/templates/exploits-tabs.hbs`
    },
    history: {
      template: `./modules/${MODULE_ID}/templates/exploits-history.hbs`,
      scrollable: ['.tab']
    },
    legend: {
      template: `./modules/${MODULE_ID}/templates/exploits-legend.hbs`,
      scrollable: ['.tab']
    }
  }

  static TABS = {
    primary: {
      tabs: [{ id: 'history' }, { id: 'legend' }],
      initial: 'legend'
    }
  }

  _localizeTitles (...path: string[]): string {
    return this._subject
      ? localize([...ExploitsPanel._path, ...path, 'named'].join('.'), { name: this._subject.name })
      : localize([...ExploitsPanel._path, ...path, 'anon'].join('.'))
  }

  async _prepareSubject () {
    const captains = await getAssigned('captain')
    this._subject = captains.length > 0 ? captains[0] : null
  }

  async _prepareContext () {
    if (!this._subject) await this._prepareSubject()

    return {
      tabs: this._prepareTabs('primary')
    }
  }

  async _preparePartContext (part: string, context: any) {
    context.tab = context.tabs[part]

    switch (part) {
      case 'history': return await this._prepareHistoryTab(context)
      case 'legend': return await this._prepareLegendTab(context)
      default: return context
    }
  }

  async _prepareHistoryTab (context: any) {
    const exploits = await getExploits(this._subject?.id)

    return {
      ...context,
      title: this._localizeTitles('history', 'title'),
      nil: exploits.length < 1 ? this._localizeTitles('history', 'nil') : undefined,
      exploits: exploits.map(exploit => exploit.history)
    }
  }

  async _prepareLegendTab (context: any) {
    const exploits = await getExploits(this._subject?.id)

    return {
      ...context,
      title: this._localizeTitles('legend', 'title'),
      nil: exploits.length < 1 ? this._localizeTitles('legend', 'nil') : undefined,
      exploits: exploits.map(exploit => {
        const legend = [...exploit.legend]
        const current = legend.pop()
        return { current, legend }
      })
    }
  }

  async _onRender (context: any, options: any) {
    await super._onRender(context, options)

    const tabs = new foundry.applications.ux.Tabs({
      navSelector: '.tabs',
      contentSelector: 'section',
      initial: this._currentTab,
      group: 'exploits-tabs'
    })

    tabs._onClickNav = (event: PointerEvent) => {
      const btn = event?.target as HTMLElement | undefined
      if (!btn) return
      this._currentTab = btn.closest('button')?.dataset.tab ?? this._currentTab
      tabs.activate(this._currentTab)
    }

    tabs.bind(this.element)
  }
}

const displayExploitsPanel = async (): Promise<ExploitsPanel> => {
  await registerPartials()
  const panel = new ExploitsPanel()
  await panel.render(true)
  return panel
}

export default displayExploitsPanel
