import { MODULE_ID } from '../settings.ts'

import { Exploit } from '../state/state.ts'

import getPanelDimensions from '../utilities/get-dimensions.ts'
import getExploits from '../state/exploits/get.ts'
import registerPartials from './register-partials.ts'
import getAssigned from '../state/crew/positions/get.ts'
import localize from '../utilities/localize.ts'
import addExploit from '../state/exploits/add.ts'
import twistExploit from '../state/exploits/twist.ts'
import ids from '../ids.ts'

const { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api

export class ExploitsPanel extends HandlebarsApplicationMixin(ApplicationV2) {
  static _path = [MODULE_ID, 'exploits-panel']

  private _currentTab: string = 'legend'
  private _subject: Actor | null | undefined = undefined
  private _buttonHandler: ((event: Event) => Promise<void>) | null = null

  static DEFAULT_OPTIONS = {
    id: `${MODULE_ID}-exploits`,
    tag: 'section',
    classes: ['exploits-panel'],
    window: {
      resizable: true,
      title: localize([...ExploitsPanel._path, 'window', 'title', 'anon'].join('.'))
    },
    position: getPanelDimensions(500, 2/3)
  }

  static PARTS = {
    tabs: {
      template: `./modules/${MODULE_ID}/templates/exploits-tabs.hbs`
    },
    history: {
      template: `./modules/${MODULE_ID}/templates/exploits-history.hbs`,
      scrollable: ['.tab']
    },
    legend: {
      template: `./modules/${MODULE_ID}/templates/exploits-legend.hbs`,
      scrollable: ['.tab']
    },
    footer: {
      template: `./modules/${MODULE_ID}/templates/exploits-footer.hbs`
    }
  }

  static TABS = {
    primary: {
      tabs: [{ id: 'history' }, { id: 'legend' }],
      initial: 'legend'
    }
  }

  _localizeTitles (...path: string[]): string {
    return this._subject
      ? localize([...ExploitsPanel._path, ...path, 'named'].join('.'), { name: this._subject.name })
      : localize([...ExploitsPanel._path, ...path, 'anon'].join('.'))
  }

  async _prepareSubject () {
    const captains = await getAssigned('captain')
    this._subject = captains.length > 0 ? captains[0] : null
  }

  async _prepareContext () {
    if (!this._subject) await this._prepareSubject()

    return {
      tabs: this._prepareTabs('primary')
    }
  }

  async _preparePartContext (part: string, context: any) {
    context.tab = context.tabs[part]

    switch (part) {
      case 'history': return await this._prepareHistoryTab(context)
      case 'legend': return await this._prepareLegendTab(context)
      default: return context
    }
  }

  async _prepareHistoryTab (context: any) {
    const exploits = await getExploits(this._subject?.id)

    return {
      ...context,
      title: this._localizeTitles('history', 'title'),
      nil: exploits.length < 1 ? this._localizeTitles('history', 'nil') : undefined,
      exploits: exploits.map(exploit => exploit.history)
    }
  }

  async _prepareLegendTab (context: any) {
    const exploits = await getExploits(this._subject?.id)

    return {
      ...context,
      title: this._localizeTitles('legend', 'title'),
      nil: exploits.length < 1 ? this._localizeTitles('legend', 'nil') : undefined,
      exploits: exploits.map((exploit: Exploit, index: number) => {
        const development = [...exploit.legend]
        const current = development.pop()
        return { current, development, hasDevelopment: development.length > 0, index, number: index + 1 }
      })
    }
  }

  async _onRender (context: any, options: any) {
    await super._onRender(context, options)

    const tabs = new foundry.applications.ux.Tabs({
      navSelector: '.tabs',
      contentSelector: 'section',
      initial: this._currentTab,
      group: 'exploits-tabs'
    })

    tabs._onClickNav = (event: PointerEvent) => {
      const btn = event?.target as HTMLElement | undefined
      if (!btn) return
      this._currentTab = btn.closest('button')?.dataset.tab ?? this._currentTab
      tabs.activate(this._currentTab)
    }

    tabs.bind(this.element)

    if (!this._buttonHandler) {
      this._buttonHandler = this._handleButtonClick.bind(this)
      this.element.addEventListener('click', this._buttonHandler)
    }
  }

  async _handleButtonClick (event: Event) {
    const target = event.target as HTMLElement
    const button = target.closest('button') as HTMLElement
    if (!button) return

    switch (button.dataset.action) {
      case 'add-exploit': return await this._openAddExploitDialog()
      case 'alter-exploit': return await this._openAlterExploitDialog(parseInt(button.dataset.exploit ?? '0') ?? 0)
    }
  }

  async _openAddExploitDialog () {
    const path = [...ExploitsPanel._path, 'dialogs', 'add-exploit']
    const title = localize([...path, 'title'].join('.'))
    const exploits = await getExploits(this._subject?.id)
    const latest = exploits.length > 0
      ? exploits[exploits.length - 1].history
      : undefined
    const note = latest
      ? `<p class="hint">${localize([...path, 'note'].join('.'), { latest })}</p>`
      : ''
    const placeholder = localize([...path, 'placeholder'].join('.'))

    const dialog = new foundry.applications.api.DialogV2({
      id: `${MODULE_ID}-add-exploit`,
      window: { title },
      position: { width: 500 },
      content: `
        <textarea id="exploit" name="exploit" placeholder="${placeholder}" rows="5"></textarea>
        ${note}
      `,
      buttons: [
        {
          action: 'add',
          label: localize([...path, 'buttons', 'add'].join('.')),
          callback: async (_event: Event, button: HTMLButtonElement) => {
            const coll = button.form?.elements
            if (!coll) return

            const textarea = (coll as any).exploit as HTMLTextAreaElement
            const history = textarea.value
            const exploit: Exploit = { history, legend: [history] }
            if (this._subject) await addExploit(this._subject.id, exploit)
            await this.render({ force: true })
          }
        },
        {
          action: 'cancel',
          label: localize([...path, 'buttons', 'cancel'].join('.')),
          callback: async () => {
            await dialog.close()
          }
        }
      ]
    })

    await dialog.render(true)
  }

  async _openAlterExploitDialog (index: number = 0) {
    const path = [...ExploitsPanel._path, 'dialogs', 'alter-exploit']
    const title = localize([...path, 'title'].join('.'))
    const exploits = await getExploits(this._subject?.id)
    const exploit = exploits[index]
    if (!exploit) return

    const current = exploit.legend[exploit.legend.length - 1]
    const table = game.tables.get(ids.tables.legend)
    if (table) await table.draw({ rollMode: 'whisper' })

    const dialog = new foundry.applications.api.DialogV2({
      id: `${MODULE_ID}-alter-exploit`,
      window: { title },
      position: { width: 500 },
      content: `
        <textarea id="exploit" name="exploit" rows="5">${current}</textarea>
      `,
      buttons: [
        {
          action: 'change',
          label: localize([...path, 'buttons', 'change'].join('.')),
          callback: async (_event: Event, button: HTMLButtonElement) => {
            const coll = button.form?.elements
            if (!coll) return

            const textarea = (coll as any).exploit as HTMLTextAreaElement
            const twist = textarea.value
            if (this._subject) await twistExploit(this._subject.id, index, twist)
            await this.render({ force: true })
          }
        },
        {
          action: 'cancel',
          label: localize([...path, 'buttons', 'cancel'].join('.')),
          callback: async () => {
            await dialog.close()
          }
        }
      ]
    })

    await dialog.render(true)
  }
}

const displayExploitsPanel = async (): Promise<ExploitsPanel> => {
  await registerPartials()
  const panel = new ExploitsPanel()
  await panel.render(true)
  return panel
}

export default displayExploitsPanel
